/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.UserDescriptionRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.user_description</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserDescription extends TableImpl<UserDescriptionRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.user_description</code>
     */
    public static final UserDescription USER_DESCRIPTION = new UserDescription();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserDescriptionRecord> getRecordType() {
        return UserDescriptionRecord.class;
    }

    /**
     * The column <code>public.user_description.id</code>.
     */
    public final TableField<UserDescriptionRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.user_description.relation_type_id</code>.
     */
    public final TableField<UserDescriptionRecord, Long> RELATION_TYPE_ID = createField(DSL.name("relation_type_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.user_description.role_id</code>.
     */
    public final TableField<UserDescriptionRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UserDescription(Name alias, Table<UserDescriptionRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserDescription(Name alias, Table<UserDescriptionRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.user_description</code> table reference
     */
    public UserDescription(String alias) {
        this(DSL.name(alias), USER_DESCRIPTION);
    }

    /**
     * Create an aliased <code>public.user_description</code> table reference
     */
    public UserDescription(Name alias) {
        this(alias, USER_DESCRIPTION);
    }

    /**
     * Create a <code>public.user_description</code> table reference
     */
    public UserDescription() {
        this(DSL.name("user_description"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UserDescriptionRecord, Long> getIdentity() {
        return (Identity<UserDescriptionRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<UserDescriptionRecord> getPrimaryKey() {
        return Internal.createUniqueKey(UserDescription.USER_DESCRIPTION, DSL.name("USER_DESCRIPTION_pkey"), new TableField[] { UserDescription.USER_DESCRIPTION.ID }, true);
    }

    @Override
    public UserDescription as(String alias) {
        return new UserDescription(DSL.name(alias), this);
    }

    @Override
    public UserDescription as(Name alias) {
        return new UserDescription(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDescription rename(String name) {
        return new UserDescription(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserDescription rename(Name name) {
        return new UserDescription(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
