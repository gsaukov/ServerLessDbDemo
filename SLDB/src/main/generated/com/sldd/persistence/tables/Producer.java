/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.ProducerRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row2;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.producer</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Producer extends TableImpl<ProducerRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.producer</code>
     */
    public static final Producer PRODUCER = new Producer();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<ProducerRecord> getRecordType() {
        return ProducerRecord.class;
    }

    /**
     * The column <code>public.producer.id</code>.
     */
    public final TableField<ProducerRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.producer.type</code>.
     */
    public final TableField<ProducerRecord, String> TYPE = createField(DSL.name("type"), SQLDataType.VARCHAR(80).nullable(false), this, "");

    private Producer(Name alias, Table<ProducerRecord> aliased) {
        this(alias, aliased, null);
    }

    private Producer(Name alias, Table<ProducerRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.producer</code> table reference
     */
    public Producer(String alias) {
        this(DSL.name(alias), PRODUCER);
    }

    /**
     * Create an aliased <code>public.producer</code> table reference
     */
    public Producer(Name alias) {
        this(alias, PRODUCER);
    }

    /**
     * Create a <code>public.producer</code> table reference
     */
    public Producer() {
        this(DSL.name("producer"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<ProducerRecord, Long> getIdentity() {
        return (Identity<ProducerRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<ProducerRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Producer.PRODUCER, DSL.name("PRODUCER_pkey"), new TableField[] { Producer.PRODUCER.ID }, true);
    }

    @Override
    public Producer as(String alias) {
        return new Producer(DSL.name(alias), this);
    }

    @Override
    public Producer as(Name alias) {
        return new Producer(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Producer rename(String name) {
        return new Producer(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Producer rename(Name name) {
        return new Producer(name, null);
    }

    // -------------------------------------------------------------------------
    // Row2 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row2<Long, String> fieldsRow() {
        return (Row2) super.fieldsRow();
    }
}
