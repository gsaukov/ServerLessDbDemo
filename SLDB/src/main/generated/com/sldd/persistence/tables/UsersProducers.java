/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.UsersProducersRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.users_producers</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UsersProducers extends TableImpl<UsersProducersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.users_producers</code>
     */
    public static final UsersProducers USERS_PRODUCERS = new UsersProducers();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UsersProducersRecord> getRecordType() {
        return UsersProducersRecord.class;
    }

    /**
     * The column <code>public.users_producers.user_id</code>.
     */
    public final TableField<UsersProducersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.users_producers.producer_id</code>.
     */
    public final TableField<UsersProducersRecord, Long> PRODUCER_ID = createField(DSL.name("producer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.users_producers.role_id</code>.
     */
    public final TableField<UsersProducersRecord, Long> ROLE_ID = createField(DSL.name("role_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private UsersProducers(Name alias, Table<UsersProducersRecord> aliased) {
        this(alias, aliased, null);
    }

    private UsersProducers(Name alias, Table<UsersProducersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.users_producers</code> table reference
     */
    public UsersProducers(String alias) {
        this(DSL.name(alias), USERS_PRODUCERS);
    }

    /**
     * Create an aliased <code>public.users_producers</code> table reference
     */
    public UsersProducers(Name alias) {
        this(alias, USERS_PRODUCERS);
    }

    /**
     * Create a <code>public.users_producers</code> table reference
     */
    public UsersProducers() {
        this(DSL.name("users_producers"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<UsersProducersRecord, Long> getIdentity() {
        return (Identity<UsersProducersRecord, Long>) super.getIdentity();
    }

    @Override
    public UsersProducers as(String alias) {
        return new UsersProducers(DSL.name(alias), this);
    }

    @Override
    public UsersProducers as(Name alias) {
        return new UsersProducers(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersProducers rename(String name) {
        return new UsersProducers(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UsersProducers rename(Name name) {
        return new UsersProducers(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
