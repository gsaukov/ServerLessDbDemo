/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.AuthInfoEntityRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row4;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.auth_info_entity</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AuthInfoEntity extends TableImpl<AuthInfoEntityRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.auth_info_entity</code>
     */
    public static final AuthInfoEntity AUTH_INFO_ENTITY = new AuthInfoEntity();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<AuthInfoEntityRecord> getRecordType() {
        return AuthInfoEntityRecord.class;
    }

    /**
     * The column <code>public.auth_info_entity.id</code>.
     */
    public final TableField<AuthInfoEntityRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.auth_info_entity.login</code>.
     */
    public final TableField<AuthInfoEntityRecord, String> LOGIN = createField(DSL.name("login"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.auth_info_entity.password</code>.
     */
    public final TableField<AuthInfoEntityRecord, String> PASSWORD = createField(DSL.name("password"), SQLDataType.VARCHAR(100).nullable(false), this, "");

    /**
     * The column <code>public.auth_info_entity.users_id</code>.
     */
    public final TableField<AuthInfoEntityRecord, Long> USERS_ID = createField(DSL.name("users_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private AuthInfoEntity(Name alias, Table<AuthInfoEntityRecord> aliased) {
        this(alias, aliased, null);
    }

    private AuthInfoEntity(Name alias, Table<AuthInfoEntityRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.auth_info_entity</code> table reference
     */
    public AuthInfoEntity(String alias) {
        this(DSL.name(alias), AUTH_INFO_ENTITY);
    }

    /**
     * Create an aliased <code>public.auth_info_entity</code> table reference
     */
    public AuthInfoEntity(Name alias) {
        this(alias, AUTH_INFO_ENTITY);
    }

    /**
     * Create a <code>public.auth_info_entity</code> table reference
     */
    public AuthInfoEntity() {
        this(DSL.name("auth_info_entity"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<AuthInfoEntityRecord, Long> getIdentity() {
        return (Identity<AuthInfoEntityRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<AuthInfoEntityRecord> getPrimaryKey() {
        return Internal.createUniqueKey(AuthInfoEntity.AUTH_INFO_ENTITY, DSL.name("AUTH_INFO_ENTITY_pkey"), new TableField[] { AuthInfoEntity.AUTH_INFO_ENTITY.ID }, true);
    }

    @Override
    public AuthInfoEntity as(String alias) {
        return new AuthInfoEntity(DSL.name(alias), this);
    }

    @Override
    public AuthInfoEntity as(Name alias) {
        return new AuthInfoEntity(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthInfoEntity rename(String name) {
        return new AuthInfoEntity(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public AuthInfoEntity rename(Name name) {
        return new AuthInfoEntity(name, null);
    }

    // -------------------------------------------------------------------------
    // Row4 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row4<Long, String, String, Long> fieldsRow() {
        return (Row4) super.fieldsRow();
    }
}
