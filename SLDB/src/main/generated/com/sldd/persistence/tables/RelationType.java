/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.RelationTypeRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row3;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.relation_type</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class RelationType extends TableImpl<RelationTypeRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.relation_type</code>
     */
    public static final RelationType RELATION_TYPE = new RelationType();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<RelationTypeRecord> getRecordType() {
        return RelationTypeRecord.class;
    }

    /**
     * The column <code>public.relation_type.id</code>.
     */
    public final TableField<RelationTypeRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.relation_type.company_description_id</code>.
     */
    public final TableField<RelationTypeRecord, Long> COMPANY_DESCRIPTION_ID = createField(DSL.name("company_description_id"), SQLDataType.BIGINT, this, "");

    /**
     * The column <code>public.relation_type.factory_description_id</code>.
     */
    public final TableField<RelationTypeRecord, Long> FACTORY_DESCRIPTION_ID = createField(DSL.name("factory_description_id"), SQLDataType.BIGINT, this, "");

    private RelationType(Name alias, Table<RelationTypeRecord> aliased) {
        this(alias, aliased, null);
    }

    private RelationType(Name alias, Table<RelationTypeRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.relation_type</code> table reference
     */
    public RelationType(String alias) {
        this(DSL.name(alias), RELATION_TYPE);
    }

    /**
     * Create an aliased <code>public.relation_type</code> table reference
     */
    public RelationType(Name alias) {
        this(alias, RELATION_TYPE);
    }

    /**
     * Create a <code>public.relation_type</code> table reference
     */
    public RelationType() {
        this(DSL.name("relation_type"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<RelationTypeRecord, Long> getIdentity() {
        return (Identity<RelationTypeRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<RelationTypeRecord> getPrimaryKey() {
        return Internal.createUniqueKey(RelationType.RELATION_TYPE, DSL.name("RELATION_TYPE_pkey"), new TableField[] { RelationType.RELATION_TYPE.ID }, true);
    }

    @Override
    public RelationType as(String alias) {
        return new RelationType(DSL.name(alias), this);
    }

    @Override
    public RelationType as(Name alias) {
        return new RelationType(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public RelationType rename(String name) {
        return new RelationType(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public RelationType rename(Name name) {
        return new RelationType(name, null);
    }

    // -------------------------------------------------------------------------
    // Row3 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row3<Long, Long, Long> fieldsRow() {
        return (Row3) super.fieldsRow();
    }
}
