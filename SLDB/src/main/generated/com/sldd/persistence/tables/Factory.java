/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.FactoryRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.factory</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Factory extends TableImpl<FactoryRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.factory</code>
     */
    public static final Factory FACTORY = new Factory();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<FactoryRecord> getRecordType() {
        return FactoryRecord.class;
    }

    /**
     * The column <code>public.factory.id</code>.
     */
    public final TableField<FactoryRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.factory.name</code>.
     */
    public final TableField<FactoryRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>public.factory.address</code>.
     */
    public final TableField<FactoryRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(160).nullable(false), this, "");

    /**
     * The column <code>public.factory.phone</code>.
     */
    public final TableField<FactoryRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.factory.position</code>.
     */
    public final TableField<FactoryRecord, String> POSITION = createField(DSL.name("position"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.factory.industry</code>.
     */
    public final TableField<FactoryRecord, String> INDUSTRY = createField(DSL.name("industry"), SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>public.factory.producer_id</code>.
     */
    public final TableField<FactoryRecord, Long> PRODUCER_ID = createField(DSL.name("producer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Factory(Name alias, Table<FactoryRecord> aliased) {
        this(alias, aliased, null);
    }

    private Factory(Name alias, Table<FactoryRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.factory</code> table reference
     */
    public Factory(String alias) {
        this(DSL.name(alias), FACTORY);
    }

    /**
     * Create an aliased <code>public.factory</code> table reference
     */
    public Factory(Name alias) {
        this(alias, FACTORY);
    }

    /**
     * Create a <code>public.factory</code> table reference
     */
    public Factory() {
        this(DSL.name("factory"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<FactoryRecord, Long> getIdentity() {
        return (Identity<FactoryRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<FactoryRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Factory.FACTORY, DSL.name("FACTORY_pkey"), new TableField[] { Factory.FACTORY.ID }, true);
    }

    @Override
    public Factory as(String alias) {
        return new Factory(DSL.name(alias), this);
    }

    @Override
    public Factory as(Name alias) {
        return new Factory(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Factory rename(String name) {
        return new Factory(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Factory rename(Name name) {
        return new Factory(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, String, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
