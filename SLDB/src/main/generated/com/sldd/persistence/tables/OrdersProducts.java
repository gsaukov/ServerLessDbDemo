/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.OrdersProductsRecord;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.List;

import org.jooq.Field;
import org.jooq.Name;
import org.jooq.Row5;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.orders_products</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersProducts extends TableImpl<OrdersProductsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders_products</code>
     */
    public static final OrdersProducts ORDERS_PRODUCTS = new OrdersProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersProductsRecord> getRecordType() {
        return OrdersProductsRecord.class;
    }

    /**
     * The column <code>public.orders_products.order_id</code>.
     */
    public final TableField<OrdersProductsRecord, Long> ORDER_ID = createField(DSL.name("order_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders_products.product_id</code>.
     */
    public final TableField<OrdersProductsRecord, Long> PRODUCT_ID = createField(DSL.name("product_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders_products.quantity</code>.
     */
    public final TableField<OrdersProductsRecord, BigDecimal> QUANTITY = createField(DSL.name("quantity"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.orders_products.product_cost</code>.
     */
    public final TableField<OrdersProductsRecord, BigDecimal> PRODUCT_COST = createField(DSL.name("product_cost"), SQLDataType.NUMERIC.nullable(false), this, "");

    /**
     * The column <code>public.orders_products.discount_amount</code>.
     */
    public final TableField<OrdersProductsRecord, BigDecimal> DISCOUNT_AMOUNT = createField(DSL.name("discount_amount"), SQLDataType.NUMERIC, this, "");

    private OrdersProducts(Name alias, Table<OrdersProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersProducts(Name alias, Table<OrdersProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.orders_products</code> table reference
     */
    public OrdersProducts(String alias) {
        this(DSL.name(alias), ORDERS_PRODUCTS);
    }

    /**
     * Create an aliased <code>public.orders_products</code> table reference
     */
    public OrdersProducts(Name alias) {
        this(alias, ORDERS_PRODUCTS);
    }

    /**
     * Create a <code>public.orders_products</code> table reference
     */
    public OrdersProducts() {
        this(DSL.name("orders_products"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public List<UniqueKey<OrdersProductsRecord>> getUniqueKeys() {
        return Arrays.asList(
            Internal.createUniqueKey(OrdersProducts.ORDERS_PRODUCTS, DSL.name("unq_order_id_product_id"), new TableField[] { OrdersProducts.ORDERS_PRODUCTS.ORDER_ID, OrdersProducts.ORDERS_PRODUCTS.PRODUCT_ID }, true)
        );
    }

    @Override
    public OrdersProducts as(String alias) {
        return new OrdersProducts(DSL.name(alias), this);
    }

    @Override
    public OrdersProducts as(Name alias) {
        return new OrdersProducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProducts rename(String name) {
        return new OrdersProducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProducts rename(Name name) {
        return new OrdersProducts(name, null);
    }

    // -------------------------------------------------------------------------
    // Row5 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, BigDecimal, BigDecimal, BigDecimal> fieldsRow() {
        return (Row5) super.fieldsRow();
    }
}
