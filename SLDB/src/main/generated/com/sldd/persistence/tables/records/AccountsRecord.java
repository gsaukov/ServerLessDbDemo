/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables.records;


import com.sldd.persistence.tables.Accounts;

import java.math.BigDecimal;
import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record5;
import org.jooq.Row5;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The table <code>public.accounts</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsRecord extends UpdatableRecordImpl<AccountsRecord> implements Record5<Long, Long, BigDecimal, LocalDate, LocalDate> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.accounts.id</code>.
     */
    public AccountsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.accounts.account_number</code>.
     */
    public AccountsRecord setAccountNumber(Long value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.account_number</code>.
     */
    public Long getAccountNumber() {
        return (Long) get(1);
    }

    /**
     * Setter for <code>public.accounts.amount</code>.
     */
    public AccountsRecord setAmount(BigDecimal value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(2);
    }

    /**
     * Setter for <code>public.accounts.opening_date</code>.
     */
    public AccountsRecord setOpeningDate(LocalDate value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.opening_date</code>.
     */
    public LocalDate getOpeningDate() {
        return (LocalDate) get(3);
    }

    /**
     * Setter for <code>public.accounts.validity_period</code>.
     */
    public AccountsRecord setValidityPeriod(LocalDate value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.accounts.validity_period</code>.
     */
    public LocalDate getValidityPeriod() {
        return (LocalDate) get(4);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record5 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row5<Long, Long, BigDecimal, LocalDate, LocalDate> fieldsRow() {
        return (Row5) super.fieldsRow();
    }

    @Override
    public Row5<Long, Long, BigDecimal, LocalDate, LocalDate> valuesRow() {
        return (Row5) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Accounts.ACCOUNTS.ID;
    }

    @Override
    public Field<Long> field2() {
        return Accounts.ACCOUNTS.ACCOUNT_NUMBER;
    }

    @Override
    public Field<BigDecimal> field3() {
        return Accounts.ACCOUNTS.AMOUNT;
    }

    @Override
    public Field<LocalDate> field4() {
        return Accounts.ACCOUNTS.OPENING_DATE;
    }

    @Override
    public Field<LocalDate> field5() {
        return Accounts.ACCOUNTS.VALIDITY_PERIOD;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public Long component2() {
        return getAccountNumber();
    }

    @Override
    public BigDecimal component3() {
        return getAmount();
    }

    @Override
    public LocalDate component4() {
        return getOpeningDate();
    }

    @Override
    public LocalDate component5() {
        return getValidityPeriod();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public Long value2() {
        return getAccountNumber();
    }

    @Override
    public BigDecimal value3() {
        return getAmount();
    }

    @Override
    public LocalDate value4() {
        return getOpeningDate();
    }

    @Override
    public LocalDate value5() {
        return getValidityPeriod();
    }

    @Override
    public AccountsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public AccountsRecord value2(Long value) {
        setAccountNumber(value);
        return this;
    }

    @Override
    public AccountsRecord value3(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public AccountsRecord value4(LocalDate value) {
        setOpeningDate(value);
        return this;
    }

    @Override
    public AccountsRecord value5(LocalDate value) {
        setValidityPeriod(value);
        return this;
    }

    @Override
    public AccountsRecord values(Long value1, Long value2, BigDecimal value3, LocalDate value4, LocalDate value5) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached AccountsRecord
     */
    public AccountsRecord() {
        super(Accounts.ACCOUNTS);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(Long id, Long accountNumber, BigDecimal amount, LocalDate openingDate, LocalDate validityPeriod) {
        super(Accounts.ACCOUNTS);

        setId(id);
        setAccountNumber(accountNumber);
        setAmount(amount);
        setOpeningDate(openingDate);
        setValidityPeriod(validityPeriod);
    }

    /**
     * Create a detached, initialised AccountsRecord
     */
    public AccountsRecord(com.sldd.persistence.tables.pojos.Accounts value) {
        super(Accounts.ACCOUNTS);

        if (value != null) {
            setId(value.getId());
            setAccountNumber(value.getAccountNumber());
            setAmount(value.getAmount());
            setOpeningDate(value.getOpeningDate());
            setValidityPeriod(value.getValidityPeriod());
        }
    }
}
