/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.OrdersRecord;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.orders</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Orders extends TableImpl<OrdersRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.orders</code>
     */
    public static final Orders ORDERS = new Orders();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersRecord> getRecordType() {
        return OrdersRecord.class;
    }

    /**
     * The column <code>public.orders.id</code>.
     */
    public final TableField<OrdersRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.orders.transaction_id</code>.
     */
    public final TableField<OrdersRecord, Long> TRANSACTION_ID = createField(DSL.name("transaction_id"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders.total_cost</code>.
     */
    public final TableField<OrdersRecord, Long> TOTAL_COST = createField(DSL.name("total_cost"), SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>public.orders.end_date</code>.
     */
    public final TableField<OrdersRecord, LocalDate> END_DATE = createField(DSL.name("end_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.orders.start_date</code>.
     */
    public final TableField<OrdersRecord, LocalDate> START_DATE = createField(DSL.name("start_date"), SQLDataType.LOCALDATE.nullable(false), this, "");

    /**
     * The column <code>public.orders.status</code>.
     */
    public final TableField<OrdersRecord, String> STATUS = createField(DSL.name("status"), SQLDataType.VARCHAR(255).nullable(false), this, "");

    /**
     * The column <code>public.orders.user_id</code>.
     */
    public final TableField<OrdersRecord, Long> USER_ID = createField(DSL.name("user_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Orders(Name alias, Table<OrdersRecord> aliased) {
        this(alias, aliased, null);
    }

    private Orders(Name alias, Table<OrdersRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    public Orders(String alias) {
        this(DSL.name(alias), ORDERS);
    }

    /**
     * Create an aliased <code>public.orders</code> table reference
     */
    public Orders(Name alias) {
        this(alias, ORDERS);
    }

    /**
     * Create a <code>public.orders</code> table reference
     */
    public Orders() {
        this(DSL.name("orders"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<OrdersRecord, Long> getIdentity() {
        return (Identity<OrdersRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<OrdersRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Orders.ORDERS, DSL.name("ORDERS_pkey"), new TableField[] { Orders.ORDERS.ID }, true);
    }

    @Override
    public Orders as(String alias) {
        return new Orders(DSL.name(alias), this);
    }

    @Override
    public Orders as(Name alias) {
        return new Orders(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(String name) {
        return new Orders(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Orders rename(Name name) {
        return new Orders(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, Long, Long, LocalDate, LocalDate, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
