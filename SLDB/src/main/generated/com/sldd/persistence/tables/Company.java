/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables;


import com.sldd.persistence.Public;
import com.sldd.persistence.tables.records.CompanyRecord;

import org.jooq.Field;
import org.jooq.Identity;
import org.jooq.Name;
import org.jooq.Row7;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.Internal;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * The table <code>public.company</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Company extends TableImpl<CompanyRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.company</code>
     */
    public static final Company COMPANY = new Company();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<CompanyRecord> getRecordType() {
        return CompanyRecord.class;
    }

    /**
     * The column <code>public.company.id</code>.
     */
    public final TableField<CompanyRecord, Long> ID = createField(DSL.name("id"), SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.company.name</code>.
     */
    public final TableField<CompanyRecord, String> NAME = createField(DSL.name("name"), SQLDataType.VARCHAR(80).nullable(false), this, "");

    /**
     * The column <code>public.company.address</code>.
     */
    public final TableField<CompanyRecord, String> ADDRESS = createField(DSL.name("address"), SQLDataType.VARCHAR(160).nullable(false), this, "");

    /**
     * The column <code>public.company.phone</code>.
     */
    public final TableField<CompanyRecord, String> PHONE = createField(DSL.name("phone"), SQLDataType.VARCHAR(40).nullable(false), this, "");

    /**
     * The column <code>public.company.discount</code>.
     */
    public final TableField<CompanyRecord, Integer> DISCOUNT = createField(DSL.name("discount"), SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * The column <code>public.company.info</code>.
     */
    public final TableField<CompanyRecord, String> INFO = createField(DSL.name("info"), SQLDataType.VARCHAR(512).nullable(false), this, "");

    /**
     * The column <code>public.company.producer_id</code>.
     */
    public final TableField<CompanyRecord, Long> PRODUCER_ID = createField(DSL.name("producer_id"), SQLDataType.BIGINT.nullable(false), this, "");

    private Company(Name alias, Table<CompanyRecord> aliased) {
        this(alias, aliased, null);
    }

    private Company(Name alias, Table<CompanyRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table());
    }

    /**
     * Create an aliased <code>public.company</code> table reference
     */
    public Company(String alias) {
        this(DSL.name(alias), COMPANY);
    }

    /**
     * Create an aliased <code>public.company</code> table reference
     */
    public Company(Name alias) {
        this(alias, COMPANY);
    }

    /**
     * Create a <code>public.company</code> table reference
     */
    public Company() {
        this(DSL.name("company"), null);
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<CompanyRecord, Long> getIdentity() {
        return (Identity<CompanyRecord, Long>) super.getIdentity();
    }

    @Override
    public UniqueKey<CompanyRecord> getPrimaryKey() {
        return Internal.createUniqueKey(Company.COMPANY, DSL.name("COMPANY_pkey"), new TableField[] { Company.COMPANY.ID }, true);
    }

    @Override
    public Company as(String alias) {
        return new Company(DSL.name(alias), this);
    }

    @Override
    public Company as(Name alias) {
        return new Company(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(String name) {
        return new Company(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Company rename(Name name) {
        return new Company(name, null);
    }

    // -------------------------------------------------------------------------
    // Row7 type methods
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, String, String, String, Integer, String, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }
}
