/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables.daos;


import com.sldd.persistence.tables.Accounts;
import com.sldd.persistence.tables.records.AccountsRecord;

import java.math.BigDecimal;
import java.time.LocalDate;
import java.util.List;

import org.jooq.Configuration;
import org.jooq.impl.DAOImpl;


/**
 * The table <code>public.accounts</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class AccountsDao extends DAOImpl<AccountsRecord, com.sldd.persistence.tables.pojos.Accounts, Long> {

    /**
     * Create a new AccountsDao without any configuration
     */
    public AccountsDao() {
        super(Accounts.ACCOUNTS, com.sldd.persistence.tables.pojos.Accounts.class);
    }

    /**
     * Create a new AccountsDao with an attached configuration
     */
    public AccountsDao(Configuration configuration) {
        super(Accounts.ACCOUNTS, com.sldd.persistence.tables.pojos.Accounts.class, configuration);
    }

    @Override
    public Long getId(com.sldd.persistence.tables.pojos.Accounts object) {
        return object.getId();
    }

    /**
     * Fetch records that have <code>id BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchRangeOfId(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ID, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>id IN (values)</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchById(Long... values) {
        return fetch(Accounts.ACCOUNTS.ID, values);
    }

    /**
     * Fetch a unique record that has <code>id = value</code>
     */
    public com.sldd.persistence.tables.pojos.Accounts fetchOneById(Long value) {
        return fetchOne(Accounts.ACCOUNTS.ID, value);
    }

    /**
     * Fetch records that have <code>account_number BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchRangeOfAccountNumber(Long lowerInclusive, Long upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.ACCOUNT_NUMBER, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>account_number IN (values)</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchByAccountNumber(Long... values) {
        return fetch(Accounts.ACCOUNTS.ACCOUNT_NUMBER, values);
    }

    /**
     * Fetch records that have <code>amount BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchRangeOfAmount(BigDecimal lowerInclusive, BigDecimal upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.AMOUNT, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>amount IN (values)</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchByAmount(BigDecimal... values) {
        return fetch(Accounts.ACCOUNTS.AMOUNT, values);
    }

    /**
     * Fetch records that have <code>opening_date BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchRangeOfOpeningDate(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.OPENING_DATE, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>opening_date IN (values)</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchByOpeningDate(LocalDate... values) {
        return fetch(Accounts.ACCOUNTS.OPENING_DATE, values);
    }

    /**
     * Fetch records that have <code>validity_period BETWEEN lowerInclusive AND
     * upperInclusive</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchRangeOfValidityPeriod(LocalDate lowerInclusive, LocalDate upperInclusive) {
        return fetchRange(Accounts.ACCOUNTS.VALIDITY_PERIOD, lowerInclusive, upperInclusive);
    }

    /**
     * Fetch records that have <code>validity_period IN (values)</code>
     */
    public List<com.sldd.persistence.tables.pojos.Accounts> fetchByValidityPeriod(LocalDate... values) {
        return fetch(Accounts.ACCOUNTS.VALIDITY_PERIOD, values);
    }
}
