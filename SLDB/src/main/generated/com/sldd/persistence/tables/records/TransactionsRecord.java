/*
 * This file is generated by jOOQ.
 */
package com.sldd.persistence.tables.records;


import com.sldd.persistence.tables.Transactions;

import java.math.BigDecimal;
import java.time.LocalDateTime;
import java.util.UUID;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record7;
import org.jooq.Row7;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * The table <code>public.transactions</code>.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TransactionsRecord extends UpdatableRecordImpl<TransactionsRecord> implements Record7<Long, UUID, String, BigDecimal, LocalDateTime, Long, Long> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>public.transactions.id</code>.
     */
    public TransactionsRecord setId(Long value) {
        set(0, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.id</code>.
     */
    public Long getId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>public.transactions.external_id</code>.
     */
    public TransactionsRecord setExternalId(UUID value) {
        set(1, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.external_id</code>.
     */
    public UUID getExternalId() {
        return (UUID) get(1);
    }

    /**
     * Setter for <code>public.transactions.transaction_type</code>.
     */
    public TransactionsRecord setTransactionType(String value) {
        set(2, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.transaction_type</code>.
     */
    public String getTransactionType() {
        return (String) get(2);
    }

    /**
     * Setter for <code>public.transactions.amount</code>.
     */
    public TransactionsRecord setAmount(BigDecimal value) {
        set(3, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.amount</code>.
     */
    public BigDecimal getAmount() {
        return (BigDecimal) get(3);
    }

    /**
     * Setter for <code>public.transactions.date_time</code>.
     */
    public TransactionsRecord setDateTime(LocalDateTime value) {
        set(4, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.date_time</code>.
     */
    public LocalDateTime getDateTime() {
        return (LocalDateTime) get(4);
    }

    /**
     * Setter for <code>public.transactions.from_account_id</code>.
     */
    public TransactionsRecord setFromAccountId(Long value) {
        set(5, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.from_account_id</code>.
     */
    public Long getFromAccountId() {
        return (Long) get(5);
    }

    /**
     * Setter for <code>public.transactions.to_account_id</code>.
     */
    public TransactionsRecord setToAccountId(Long value) {
        set(6, value);
        return this;
    }

    /**
     * Getter for <code>public.transactions.to_account_id</code>.
     */
    public Long getToAccountId() {
        return (Long) get(6);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record7 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row7<Long, UUID, String, BigDecimal, LocalDateTime, Long, Long> fieldsRow() {
        return (Row7) super.fieldsRow();
    }

    @Override
    public Row7<Long, UUID, String, BigDecimal, LocalDateTime, Long, Long> valuesRow() {
        return (Row7) super.valuesRow();
    }

    @Override
    public Field<Long> field1() {
        return Transactions.TRANSACTIONS.ID;
    }

    @Override
    public Field<UUID> field2() {
        return Transactions.TRANSACTIONS.EXTERNAL_ID;
    }

    @Override
    public Field<String> field3() {
        return Transactions.TRANSACTIONS.TRANSACTION_TYPE;
    }

    @Override
    public Field<BigDecimal> field4() {
        return Transactions.TRANSACTIONS.AMOUNT;
    }

    @Override
    public Field<LocalDateTime> field5() {
        return Transactions.TRANSACTIONS.DATE_TIME;
    }

    @Override
    public Field<Long> field6() {
        return Transactions.TRANSACTIONS.FROM_ACCOUNT_ID;
    }

    @Override
    public Field<Long> field7() {
        return Transactions.TRANSACTIONS.TO_ACCOUNT_ID;
    }

    @Override
    public Long component1() {
        return getId();
    }

    @Override
    public UUID component2() {
        return getExternalId();
    }

    @Override
    public String component3() {
        return getTransactionType();
    }

    @Override
    public BigDecimal component4() {
        return getAmount();
    }

    @Override
    public LocalDateTime component5() {
        return getDateTime();
    }

    @Override
    public Long component6() {
        return getFromAccountId();
    }

    @Override
    public Long component7() {
        return getToAccountId();
    }

    @Override
    public Long value1() {
        return getId();
    }

    @Override
    public UUID value2() {
        return getExternalId();
    }

    @Override
    public String value3() {
        return getTransactionType();
    }

    @Override
    public BigDecimal value4() {
        return getAmount();
    }

    @Override
    public LocalDateTime value5() {
        return getDateTime();
    }

    @Override
    public Long value6() {
        return getFromAccountId();
    }

    @Override
    public Long value7() {
        return getToAccountId();
    }

    @Override
    public TransactionsRecord value1(Long value) {
        setId(value);
        return this;
    }

    @Override
    public TransactionsRecord value2(UUID value) {
        setExternalId(value);
        return this;
    }

    @Override
    public TransactionsRecord value3(String value) {
        setTransactionType(value);
        return this;
    }

    @Override
    public TransactionsRecord value4(BigDecimal value) {
        setAmount(value);
        return this;
    }

    @Override
    public TransactionsRecord value5(LocalDateTime value) {
        setDateTime(value);
        return this;
    }

    @Override
    public TransactionsRecord value6(Long value) {
        setFromAccountId(value);
        return this;
    }

    @Override
    public TransactionsRecord value7(Long value) {
        setToAccountId(value);
        return this;
    }

    @Override
    public TransactionsRecord values(Long value1, UUID value2, String value3, BigDecimal value4, LocalDateTime value5, Long value6, Long value7) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        value5(value5);
        value6(value6);
        value7(value7);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TransactionsRecord
     */
    public TransactionsRecord() {
        super(Transactions.TRANSACTIONS);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(Long id, UUID externalId, String transactionType, BigDecimal amount, LocalDateTime dateTime, Long fromAccountId, Long toAccountId) {
        super(Transactions.TRANSACTIONS);

        setId(id);
        setExternalId(externalId);
        setTransactionType(transactionType);
        setAmount(amount);
        setDateTime(dateTime);
        setFromAccountId(fromAccountId);
        setToAccountId(toAccountId);
    }

    /**
     * Create a detached, initialised TransactionsRecord
     */
    public TransactionsRecord(com.sldd.persistence.tables.pojos.Transactions value) {
        super(Transactions.TRANSACTIONS);

        if (value != null) {
            setId(value.getId());
            setExternalId(value.getExternalId());
            setTransactionType(value.getTransactionType());
            setAmount(value.getAmount());
            setDateTime(value.getDateTime());
            setFromAccountId(value.getFromAccountId());
            setToAccountId(value.getToAccountId());
        }
    }
}
